#!/bin/bash
#
# Copyright (c) 2017 AstroArch Consulting, Inc. All rights reserved
#
# Install PowerCLI (rebuild CURL as necessary)
#
# Target: CentOS/RHEL 6/7
#
###

function powercli() {
	DEVEL="rpm-build redhat-rpm-config gcc cpp glibc-devel glibc-headers kernel-headers mpfr libmpc bzip2 automake openssl-devel"
	basedir='https://github.com'

	# Centos7 version
	CURL="http://vault.centos.org/7.3.1611/os/Source/SPackages/curl-7.29.0-35.el7.centos.src.rpm"
	if [ $VERSION_ID -lt 7 ]
	then
		# Centos 6 Version
		CURL="http://vault.centos.org/6.9/os/Source/SPackages/curl-7.19.7-52.el6.src.rpm"
	fi

	PDIR=/tmp/powershell.$$
	mkdir -p $PDIR 2> /dev/null
	cd $PDIR

	echo "Check if Curl supports OpenSSL"
	curl --version |grep OpenSSL > /dev/null
	if [ $? != 0 ]
	then
		echo "Need OpenSSL: Overriding default CURL"
		#setup the environment to build
		if [ -e ~/rpmbuild ]
		then
			mv ~/rpmbuild ~/rpmbuild.orig
		fi
		mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
		echo '%_topdir %(echo $HOME)/rpmbuild' > ~/.rpmmacros

		# Get Curl
		wget $CURL
		rpm -ivh `basename $CURL`

		# modify the spec
		pushd ~/rpmbuild/SPECS
		sed 's/libssh2 \\/libssh2/' curl.spec | sed 's/--without-ssl --with-nss//' t.curl.spec
	
		# Install DEVS
		yum -y install $DEVEL

		# Build Curl with modified spec
		rpmbuild -ba t.curl.spec

		# Override Curl and install all but debug info
		rpm --force -Uvh `ls ~/rpmbuild/RPMS/x86_64 |grep -v debuginfo`

		# Remove DEVS
		rm -rf ~/rpmbuild
		rpm -e $DEVEL

		# restore original enviro if it exists
		if [ -e ~/rpmbuild.orig ]
		then
			mv ~/rpmbuild.orig ~/rpmbuild
		fi
		popd
	fi	

	echo "Checking for Latest Powershell"
	# Get the latest name
	rpmdir=`curl -sL $basedir/PowerShell/PowerShell/releases/latest|grep centos |awk -F= '{print $2}' |awk '{print $1}'|sed 's/"//g'|sed 's/\n//g'`
	
	# Do we really need to get it
	rpm=`basename $rpmdir`
	
	# slower but gets the line we need, not just a 'check'
	inst=`rpm -qa|grep -i powershell`
	if [ "${inst}.rpm" != "$rpm" ]
	then
		file=`echo ${basedir}${rpmdir} | sed 's/ //g'`
		echo -e "Downloading $rpm from\n $file"
		wget $file

		# Not installed with this version either update or install
		yumcmd="update"
		yummsg="Updating $rpm"
		if [ Z"$inst" = Z"" ]
		then
			yumcmd="install"
			yummsg="Installing $rpm"
		fi
		echo $yummsg
		yum $yumcmd -y $rpm
	else
		# nothing needed, log and go on
		echo "$rpm already installed."
	fi
	
	
	# now get the latest PowerNSX
	if [ ! -e /usr/local/share/powershell/Modules/PowerNSX/PowerNSX.psm1 ]
	then
		echo "Installing PowerNSX"
		# Install PowerNSX
		wget https://github.com/vmware/powernsx/archive/master.zip
		unzip master.zip
		mkdir -p /usr/local/share/powershell/Modules/PowerNSX
		cp -r powernsx-master/PowerNSX.psm1 powernsx-master/PowerNSX.psd1 /usr/local/share/powershell/Modules/PowerNSX
		cp -r powernsx-master/tools /usr/local/share/powershell
	
		echo "Installing PowerCLI"
		# Install PowerCLI
		pcli=`curl -sk https://labs.vmware.com/flings/powercli-core | grep zip | awk -F= '{print $4}'|awk -F\" '{print $2}'`
		wget $pcli
		unzip PowerCLI_Core.zip
		(cd /usr/local/share/powershell/Modules; unzip /tmp/powershell/PowerCLI.ViCore.zip)
		(cd /usr/local/share/powershell/Modules; unzip /tmp/powershell/PowerCLI.Vds.zip)
	
		echo "Setting Profile for Powershell"
		# Set profile.d for PS containing PSModulePath
		pfile=`rpm -ql powershell |head -1`
		ppath=`dirname $pfile`
		echo "# Module Path for Powershell" > /etc/profile.d/powershell.sh
		echo "export PSModulePath=$ppath:/usr/local/share/powershell/Modules" >> /etc/profile.d/powershell.sh
		echo "# Module Path for Powershell" > /etc/profile.d/powershell.csh
		echo "setenv PSModulePath $ppath:/usr/local/share/powershell/Modules" >> /etc/profile.d/powershell.csh
	else
		# upgrade PowerNSX
		echo "Updating PowerNSX"
		powershell -Command 'Update-PowerNSX -branch master'
	fi

	cd $menu_pd
	rm -rf $PDIR
}

powercli
