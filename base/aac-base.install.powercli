#!/bin/bash
#
# Copyright (c) 2017-2018 AstroArch Consulting, Inc. All rights reserved
#
# Install PowerCLI (rebuild CURL as necessary)
#
# Target: CentOS/RHEL 6/7
#
# Version 1.1
#
###
function powercli_version() {
	echo "1.5.0"
}

function powercli() {
	INSTALL="unzip zip sshpass"
	DEVEL="rpm-build redhat-rpm-config gcc cpp glibc-devel glibc-headers kernel-headers mpfr libmpc bzip2 automake openssl-devel autoconf dwz elfutils keyutils-libs-devel krb5-devel libcom_err-devel libkadm5 libselinux-devel libsepol-devel libverto-devel m4 patch pcre-devel perl-Data-Dumper perl-Test-Harness perl-Thread-Queue perl-srpm-macros zlib-devel groff libidn-devel libssh2-devel nss-devel openldap-devel stunnel perl-Digest-MD5 valgrind" 
	basedir='https://github.com'

	# Centos7 version
	CURL="http://vault.centos.org/7.3.1611/os/Source/SPackages/curl-7.29.0-35.el7.centos.src.rpm"
	if [ $VERSION_ID -lt 7 ]
	then
		# Centos 6 Version
		CURL="http://vault.centos.org/6.9/os/Source/SPackages/curl-7.19.7-52.el6.src.rpm"
	fi

	PDIR=/tmp/powershell.$$
	mkdir -p $PDIR 2> /dev/null
	cd $PDIR

	echo "Check if Curl supports OpenSSL"
	curl --version |grep OpenSSL > /dev/null
	if [ $? != 0 ]
	then
		echo "Need OpenSSL: Overriding default CURL"
		#setup the environment to build
		if [ -e ~/rpmbuild ]
		then
			mv ~/rpmbuild ~/rpmbuild.orig
		fi
		mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
		echo '%_topdir %(echo $HOME)/rpmbuild' > ~/.rpmmacros

		# Get Curl
		wget $CURL
		rpm -ivh `basename $CURL`

		# modify the spec
		cd ~/rpmbuild/SPECS
		sed 's/libssh2 \\/libssh2/' curl.spec | sed 's/--without-ssl --with-nss//' > t.curl.spec
	
		# Install DEVS
		yum -y install $INSTALL $DEVEL

		# Build Curl with modified spec
		rpmbuild -ba t.curl.spec


		###
		# Add to REPO, do not install
		###
		if [ $CREATEREPO -eq 1 ]
		then
			# save in repo
			createrepo `ls ~/rpmbuild/RPMS/x86_64|sed 's%^%~/rpmbuild/RPMS/x86_64/%'`
		else
			# Override Curl and install all but debug info
			rpm --force -Uvh `ls ~/rpmbuild/RPMS/x86_64|grep -v debuginfo|sed 's%^%~/rpmbuild/RPMS/x86_64/%'`
		fi

		# Remove DEVS
		rm -rf ~/rpmbuild
		rpm -e $DEVEL

		# restore original enviro if it exists
		if [ -e ~/rpmbuild.orig ]
		then
			mv ~/rpmbuild.orig ~/rpmbuild
		fi
		cd $PDIR
	fi	

	echo "Checking for Latest Powershell"
	# Get the latest name
	rpmdir=`curl -sL $basedir/PowerShell/PowerShell/releases/|grep alpha|grep x86_64.rpm | grep href | awk -F= '{print $2}' |awk '{print $1}'|sed 's/"//g'|sed 's/\n//g'|head -1`
	
	# Do we really need to get it
	rpm=`basename $rpmdir`
	file=`echo ${basedir}${rpmdir} | sed 's/ //g'`
	
	if [ $CREATEREPO -eq 1 ]
	then
		if [ `checkrepo $rpm` -eq 0 ]
		then
			wget $file
			createrepo $rpm
		fi
	else
		# slower but gets the line we need, not just a 'check'
		inst=`rpm -qa|grep -i powershell`
		if [ "${inst}.rpm" != "$rpm" ]
		then
			echo -e "Downloading $rpm from\n $file"
			wget $file

			# Not installed with this version either update or install
			yumcmd="update"
			yummsg="Updating $rpm"
			if [ Z"$inst" = Z"" ]
			then
				yumcmd="install"
				yummsg="Installing $rpm"
			fi
			echo $yummsg
			yum $yumcmd -y $rpm
		else
			# nothing needed, log and go on
			echo "$rpm already installed."
		fi
	fi
	
	# now get the latest PowerNSX
	if [ ! -e /usr/local/share/powershell/Modules/PowerNSX/PowerNSX.psm1 ]
	then
		echo "Installing PowerNSX"
		# Install PowerNSX
		wget https://github.com/vmware/powernsx/archive/master.zip
		unzip master.zip
		mkdir -p /usr/local/share/powershell/Modules/PowerNSX
		cp -r powernsx-master/PowerNSX.psm1 powernsx-master/PowerNSX.psd1 /usr/local/share/powershell/Modules/PowerNSX
		cp -r powernsx-master/tools /usr/local/share/powershell
	
		echo "Installing PowerCLI"
		# Install PowerCLI
		pcli=`curl -sk https://labs.vmware.com/flings/powercli-core | grep zip | awk -F= '{print $4}'|awk -F\" '{print $2}'`
		wget $pcli
		unzip PowerCLI_Core.zip
		(cd /usr/local/share/powershell/Modules; unzip $PDIR/PowerCLI.ViCore.zip)
		(cd /usr/local/share/powershell/Modules; unzip $PDIR/PowerCLI.Vds.zip)
		cat << EOF > /usr/local/share/powershell/Start-PowerCLI.ps1
\$a = (Get-Host).PrivateData
\$b = get-psreadlineoption | select ErrorBackgroundColor
\$clear = \$b.ErrorBackgroundColor
\$black= 'black'
if (\$clear -eq 'black') { \$black='white' }
$a.WarningForegroundColor = $black

'command','number','operator','member','parameter','string','type','variable','keyword' |
foreach { set-psreadlineoption \$_ \$black \$clear }
EOF
		cat $PDIR/Start-PowerCLI.ps1 |sed 's/yellow/\$black/g' >> /usr/local/share/powershell/Start-PowerCLI.ps1
		cat << EOF > /usr/local/bin/powercli
#!/bin/sh
powershell -NoExit -Command /usr/local/share/powershell/Start-PowerCLI.ps1
EOF
		chmod 755 /usr/local/bin/powercli
	
		echo "Setting Profile for Powershell"
		# Set profile.d for PS containing PSModulePath
		pfile=`rpm -ql powershell |head -1`
		ppath=`dirname $pfile`
		echo "# Module Path for Powershell" > /etc/profile.d/powershell.sh
		echo "export PSModulePath=$ppath:/usr/local/share/powershell/Modules" >> /etc/profile.d/powershell.sh
		echo "# Module Path for Powershell" > /etc/profile.d/powershell.csh
		echo "setenv PSModulePath $ppath:/usr/local/share/powershell/Modules" >> /etc/profile.d/powershell.csh
	else
		# upgrade PowerNSX
		echo "Updating PowerNSX"
		powershell -Command 'Update-PowerNSX -branch master'
	fi

	if [ $CREATEREPO -eq 1 ]
	then
		ver=`grep ModuleVersion /usr/local/share/powershell/Modules/PowerNSX/PowerNSX.psd1 | awk -F\' '{print $2}'`
		fpm -s dir -t rpm -n powercli -v $ver /usr/local/share/powershell /etc/profile.d/powershell.*
		createrepo powercli-${ver}-*.x86-64.rpm
	fi

	cd $menu_pd
	rm -rf $PDIR
}

