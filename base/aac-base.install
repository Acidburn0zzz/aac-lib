#!/bin/bash
#
# Copyright (c) 2016-2018 AstroArch Consulting, Inc. All rights reserved
#
#
#
# Create a Base Install
#
# Target: CentOS/RHEL 7
#
###
VERSION="1.7.1"

function version() {
	echo "$0 version is $VERSION"
	for x in `ls ${prog}.*`
	do
		. ./$x
		y=`echo $x | awk -F\. '{print $4}'`
		echo -n "	"
		echo -n "$y version "
		eval ${y}_version
	done
}

function findos() {
	if [ -e /etc/os-release ]
	then
		. /etc/os-release
		theos=`echo $ID | tr [:upper:] [:lower:]`
	elif [ -e /etc/centos-release ]
	then
		theos=`cut -d' ' -f1 < /etc/centos-release | tr [:upper:] [:lower:]`
		VERSION_ID=`awk '{print $3}' /etc/centos-release | awk -F. '{print $1}'`
	elif [ -e /etc/redhat-release ]
	then
		theos=`cut -d' ' -f1 < /etc/redhat-release | tr [:upper:] [:lower:]`
		VERSION_ID=`awk '{print $3}' /etc/redhat-release | awk -F. '{print $1}'`
	elif [ -e /etc/fedora-release ]
	then
		theos=`cut -d' ' -f1 < /etc/fedora-release | tr [:upper:] [:lower:]`
		VERSION_ID=`awk '{print $3}' /etc/fedora-release | awk -F. '{print $1}'`
	elif [ -e /etc/debian-release ]
	then
		theos=`cut -d' ' -f1 < /etc/debian-release | tr [:upper:] [:lower:]`
		VERSION_ID=`awk '{print $3}' /etc/debian-release | awk -F. '{print $1}'`
	else
		colorecho "Do not know this operating system. LinuxVSM may not work." 1
		theos="unknown"
	fi
	export VERSION_ID
}

function checkdep() {
	dep=$1
	needdep=0
	if [ Z"$theos" = Z"centos" ] || [ Z"$theos" = Z"redhat" ] || [ Z"$theos" = Z"fedora" ]
	then
		rpm -q $dep >& /dev/null
		if [ $? -ne 0 ]
		then
			echo "Missing Dependency $dep"
			needdep=1
		fi
	elif [ Z"$theos" = Z"debian" ] || [ Z"$theos" = Z"ubuntu" ]
	then
		dpkg -s $dep >& /dev/null
		if [ $? -ne 0 ]
		then
			echo "Missing Dependency $dep"
			needdep=1
		fi
	elif [ Z"$theos" = Z"unknown" ]
	then
		echo "Cannot Check Dependenty $dep"
	fi
}

function installdep() {
	if [ Z"$theos" = Z"centos" ] || [ Z"$theos" = Z"redhat" ] || [ Z"$theos" = Z"fedora" ]
	then
		yum -y install $INSTALL $DEVEL
	elif [ Z"$theos" = Z"debian" ] || [ Z"$theos" = Z"ubuntu" ]
	then
		which apt-get >& /dev/null
		if [ $? -eq 0 ]
		then
			apt-get install -y $DINSTALL $DDEVEL
		else
			apt install -y $DINSTALL $DDEVEL
		fi
	fi
}

function menu() {
	all_done=0;
	while [ $all_done != 1 ]
	do
		select choice in `ls ${prog}.*` Exit
		do
			if [ $choice = "Exit" ]
			then
				all_done=1
			else
				installer=`echo $choice | awk -F\. '{print $4}'`
				echo "Running $installer"
				menu_pd=`pwd`
				. ./$choice
				$installer
				cd $menu_pd
			fi
			break
		done
	done
}

function startsrv() {
	if [ $VERSION_ID -gt 6 ]
	then
		systemctl enable $1 >& /dev/null
		systemctl restart $1
	else
		service $1 restart
		chkconfig $1 on
	fi
}

function tz() {
	echo "Checking Timezone settings"
	if [ -e /usr/bin/yum ]
	then
		yum -q makecache fast
	fi
	checkdep ntp
	if [ $needdep -eq 1 ]
	then
		echo "Install/update ntp"
		INSTALL=ntp
		DINSTALL=$INSTALL
		installdep
	fi
	checkdep wget
	if [ $needdep -eq 1 ]
	then
		echo "Install/update wget"
		INSTALL=wget
		DINSTALL=$INSTALL
		installdep
	fi
	settz=0
	ls -al /etc/localtime |grep "$TZ" > /dev/null
	if [ $? != 0 ]
	then
		echo "Setting up TZ"
		settz=1
	fi
	if [ $VERSION_ID -gt 6 ]
	then
		if [ $settz -eq 1 ]
		then
			timedatectl set-timezone $TZ
		fi
	else
		if [ $settz -eq 1 ]
		then
			(cd /etc; rm localtime; ln -s /usr/share/zoneinfo/$TZ localtime)
		fi
	fi
	startsrv ntpd
}

function epel() {
	echo "Checking for EPEL repository"
	checkdep epel-release
	if [ $needdep -eq 1 ]
	then
		if [ Z"$theos" = Z"centos" ] || [ Z"$theos" = Z"redhat" ] || [ Z"$theos" = Z"fedora" ]
		then
			echo "Installing EPEL repository"
			wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-${VERSION_ID}.noarch.rpm
			rpm -ivh epel-release-latest-${VERSION_ID}.noarch.rpm
		fi
	fi
}

function selinux() {
	#
	# only install if needed
	echo "Checking for SELinux Policy RPMS"
	if [ Z"$theos" = Z"centos" ] || [ Z"$theos" = Z"redhat" ] || [ Z"$theos" = Z"fedora" ]
	then
		checkdep policycoreutils-python
		if [ $needdep -eq 1 ]
		then
			echo "Installing SELinux Policy RPMS"
			INSTALL="policycoreutils-python setroubleshoot-server"
			DINSTALL=$INSTALL
		fi
	elif [ Z"$theos" = Z"debian" ] || [ Z"$theos" = Z"ubuntu" ]
	then
		checkdep policycoreutils
		if [ $needdep -eq 1 ]
		then
			INSTALL="policycoreutils selinux-utils"
			DINSTALL=$INSTALL
		fi
	fi
	installdep
	echo "If SELinux issues pop up use the following to debug:"
	echo "	sealert -a /var/log/audit/audit.log"
}

function fixselinux() {
	echo "Reset SELinux after installs"
	restorecon -R -v /dev
	if [ -e /etc/puppet ]
	then
		restorecon -R -v /etc/puppet
		restorecon -R -v /var/lib/puppet
	fi
}

function usage() {
	# echo "Usage: $prog [--install|-i installer] [--createrepo|-c] [--help|-h] [timezone]"
	echo "Usage: $prog [--install|-i installer] [-u] [-v|--version] [--help|-h] [timezone]"
	echo "	-u => Update"
	echo "	-i => Install"
	echo "  -v => version"
	echo "	Last Argument is used to set the timezone"
	echo "	Default timezone $TZ"
	echo "	Available installers are:"
	for x in `ls ${prog}.*`
	do
		echo -n "		"
		echo $x | awk -F\. '{print $4}'
	done
	exit
}

theos=""
needdep=0
findos
myhome=$HOME
update=0
prog=$0
installer=""
CREATEREPO=0
INSTALL=""
DINSTALL=""
DDEVEL=""
DEVEL=""
TZ='America/Chicago'
while [[ $# -gt 0 ]]
do
	key="$1"
	case "$key" in 
		-i|--install)
			installer=$2
			shift
			;;
		--home)
			myhome=$2
			shift
			;;
		#--createrepo|-c)
		#	CREATEREPO=1
		#	shift
		#	;;
		-u|--update)
			update=1
			;;
		--version|-v)
			version
			exit
			;;
		--help|-h) 
			usage
			;;
		*) 
			fgrep "$1" /usr/share/zoneinfo/zone.tab >& /dev/null
			if [ $? -eq 0 ]
			then
				TZ=$1
			else
				echo "Bad Time Zone Specified"
				exit
			fi
			;;
	esac
	shift
done

###
# Update aac-base bits
###
if [ $update -eq 1 ]
then
	files=`wget -O - https://github.com/Texiwill/aac-lib/blob/master/base |grep aac-base.install | grep span | awk -F\> '{print $3}' |sed 's#</a##g'`
	for x in $files
	do
		wget -O $x https://raw.githubusercontent.com/Texiwill/aac-lib/master/base/$x
	done
	echo "Update Done - Exiting"
	exit
fi

###
# Get the RHEL/CentOS Version
###

DNAME=`hostname -d`
RPMLIST=''
if [ Z"$theos" = Z"centos" ] || [ Z"$theos" = Z"redhat" ] || [ Z"$theos" = Z"fedora" ]
then
	RPMLIST=`rpm -qa`
elif [ Z"$theos" = Z"debian" ] || [ Z"$theos" = Z"ubuntu" ]
then
	RPMLIST=`dpkg -l`
fi

###
# Now do the base install
###
tz
epel
selinux

###
# Do we Create the Repo
###
if [ $CREATEREPO -eq 1 ]
then
	. ./${0}.fpm
	createrepo
	fpm
fi

###
# Run the specific installer or use the menu
###
if [ Z"$installer" != Z"" ]
then
	. ./${0}.$installer
	$installer
else
	menu
fi

###
# General Cleanup
###
if [ -e /tmp/vsm ]
then
	rm -rf /tmp/vsm
fi
fixselinux
